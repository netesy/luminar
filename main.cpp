#include "repl.hh"
#include <iostream>

int main(int argc, char *argv[])
{
    if (argc > 1) {
        // If command-line arguments are provided, check for build or run mode
        std::string mode = argv[1];

        if (mode == "build") {
            // Check for the target operating system
            if (argc > 2) {
                std::string target = argv[2];
                if (target == "windows") {
                    // Call function to build for Windows
                    // buildWindows();
                    std::cout << "Building for Windows..." << std::endl;
                } else if (target == "mac") {
                    // Call function to build for macOS
                    // buildMac();
                    std::cout << "Building for macOS..." << std::endl;
                } else if (target == "linux") {
                    // Call function to build for Linux
                    // buildLinux();
                    std::cout << "Building for Linux..." << std::endl;
                } else {
                    std::cerr << "Error: Invalid target operating system." << std::endl;
                    return 1;
                }
            } else {
                std::cerr << "Error: Missing target operating system." << std::endl;
                return 1;
            }
        } else if (mode == "run") {
            // Start the REPL in development mode with hot reloading
            REPL::startDevMode();
        } else {
            std::cerr << "Error: Invalid mode. Use 'build' or 'run'." << std::endl;
            return 1;
        }
    } else {
        // Otherwise, start the REPL in interactive mode
        REPL::start();
    }

    return 0;
}
//#include "parser.hh"
//#include "scanner.hh"

//int main()
//{
//    std::string source = "var name = \"Joe Medly\"; var pi = 3.1423838; print(name); print(pi);";
//    Scanner scanner(source);
//    Parser parser(scanner);

//    try {
//        Bytecode bytecode = parser.parse();

//        for (const auto &instruction : bytecode) {
//            instruction.debug();
//            //std::cout << instruction.debug() << std::endl;
//        }

//        // Execute bytecode here (not implemented in this example)
//        // For now, we will just print the generated bytecode
//        //        for (const Instruction &instruction : bytecode) {
//        //            std::cout << "Opcode: " << static_cast<int>(instruction.opcode)
//        //                      << ", Line: " << instruction.lineNumber << std::endl;
//        //        }
//    } catch (const std::runtime_error &e) {
//        std::cerr << "Main Loop Error: " << e.what() << std::endl;
//    }

//    return 0;
//}
