// sample.zm
// Zenith Programming Language

//It supports the general operations.

1 + 2 + (3 * 4) - (10 / 5);
!true;
!false;
+10;
-5;
"Hello" + " " + "World";

// Define function with optional parameter and conditional message
fn greeting(name: str, date: str? = None): str {
    var name:str = "John";
    var message: str = "Hello {name}";

    if(date){
    var date_str:date = date;
    message += ", today's date is {date_str}.toDate()";
    }

    return message;
}

// Print greetings with and without date
print(greeting(name="John")); // Hello John
print(greeting(name="John", date="12/05/2024"));// Hello John, today's date is Monday 12th of May, 2024


// Use this syntax for iterating over a range
for (var i in 1..10) {
    print("Iteration: {i}");
}

// Use this syntax for iterating over a list
var my_list:list = (1, 2, 3, 4, 5);
for (key in my_list) {
    print(key);
}

// Iterate over dictionary
var my_dict:dict = {'a': 1, 'b': 2, 'c': 3};
for (key, value in my_dict) {
    print(key, value);
}

// Define a while loop
var j:int = 0;
while (j < 5) {
    print("While loop iteration: {j}");
    j += 1;
}

// Demonstrate exception handling
fn factorial(n: int) -> int? {
  if (n < 0) {
    return error("negative input") // Error handling using specific return type
  } elif (n == 0 ){
    return 1
  } else {
    return n * factorial(n - 1)
  }
}

// Function to sum elements of a list with dependent type checking
fn sum(list: List<nat>) -> nat { // `nat` represents natural numbers
  match list {
    Nil => 0
    Cons(head, tail) => head + sum(tail) // Dependent type checking ensures `head` is a `nat`
  }
}


// Define a class for Person
class Person {
    var name:str;
    var age:int;

    fn Person(self, name:str, age:int) {
        self.name = name;
        self.age = age;
    }

    fn display(self) {
        print("Name:", self.name);
        print("Age:", self.age);
    }
}

// Create an object of class Person
var person1 = Person("Alice", 30);
person1.display();

// Demonstrate file I/O
var file = open("data.txt", "w");
file.write("Hello, World!");
file.close();

//packages
import math;

var radius:int = 5;
print("Area of circle:", math.pi * radius * radius);

//concurency
// Define a function for parallel execution
fn parallel_task(id:int) {
    print("Executing parallel task {id}");
    // Simulate some computation or I/O operation
    sleep(randint(1, 3));  // Sleep for a random duration between 1 and 3 seconds
    print("Parallel task {id} completed");
}

// Execute multiple tasks in parallel
parallel {
    for (var i = 1; i <= 5; i++) {
        parallel_task(i);
    }
}


// Define a function for concurrent execution
fn concurrent_task(id:int): None {
    print("Executing concurrent task {id}");
    // Simulate some computation or I/O operation
    sleep(randint(1, 3));  // Sleep for a random duration between 1 and 3 seconds
    print("Concurrent task {id} completed");
}

// Execute multiple tasks concurrently
concurrent {
    for (var i = 1; i <= 3; i++) {
        concurrent_task(i);
    }
}


// Define a function for asynchronous execution
async fn async_task() {
    // Asynchronous task implementation
}

// Execute asynchronous task
var result = await async_task();

// Use result of asynchronous task
print("Async task result: {result}");

//generics
fn swap[T](a:T, b:T):void {
    var temp:T = a;
    a = b;
    b = temp;
}

// Define a function to demonstrate pattern matching
fn matchExample(value):str {
    match(value) {
        int:
            print("The value is an integer");
        str:
            print("The value is a string");
        list:
            print("The value is a list");
        dict:
            print("The value is a dictionary");
        _:
            print("Unknown type");
    }
}

    match(value) {
        int:
            print("The value is an integer");
        str:
            print("The value is a string");
        list:
            print("The value is a list");
        dict:
            print("The value is a dictionary");
        _:
            print("Unknown type");
    }

// Usage example
matchExample(42);          // Output: The value is an integer
matchExample("Hello");     // Output: The value is a string
matchExample([1, 2, 3]);   // Output: The value is a list
matchExample({'a': 1});    // Output: The value is a dictionary
matchExample(true);        // Output: Unknown type


// End of the sample syntax
